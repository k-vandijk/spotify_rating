@{
    ViewData["Title"] = "spotify_rating";
}

<!-- Page Wrapper -->
<div id="pageWrapper" class="position-relative">
    <!-- Loading Spinner Overlay (covers only #pageWrapper) -->
    <div id="loadingOverlay" class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center" style="
        z-index: 9999;
        background: rgba(255,255,255,0.85);">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <!-- Main App UI (hidden until data is loaded) -->
    <div id="app" style="display: none;">
        <div class="card shadow-lg container p-0 my-5 col-lg-6 col-md-8 col-sm-10 overflow-hidden">
            <div class="position-relative">
                <div class="progress" style="height: 6px; border-radius: 0;">
                    <div id="trackProgress" class="progress-bar bg-success" role="progressbar"></div>
                </div>
                <div class="position-absolute top-100 end-0 mt-1 me-3 small" style="z-index: 1;">
                    <span id="ratedCount">0</span> / <span id="totalCount">0</span>
                </div>
            </div>

            <div class="p-5">
                <div class="text-center position-relative mb-4">
                    <img id="cover" class="img-fluid rounded shadow-sm mb-4" style="max-height: 300px;" src="" alt="Album cover" />
                    <div class="d-flex justify-content-center align-items-center gap-2 mb-3">
                        <h5 id="trackInfo" class="fw-semibold mb-0"></h5>
                        <a id="spotifyLink" href="#" target="_blank" rel="noopener"
                           class="btn btn-spotify btn-sm rounded-circle shadow-sm d-flex align-items-center justify-content-center"
                           style="width: 32px; height: 32px;"
                           title="Open in Spotify">
                            <img src="https://upload.wikimedia.org/wikipedia/commons/8/84/Spotify_icon.svg" alt="Spotify"
                                 style="width: 18px; height: 18px;">
                        </a>
                    </div>
                </div>

                <div class="row gx-3">
                    <div class="col-4 d-grid">
                        <button id="btnYes" class="btn btn-success btn-lg shadow-sm">
                            <i class="fa-solid fa-thumbs-up"></i>
                        </button>
                    </div>
                    <div class="col-4 d-grid">
                        <button id="btnSuper" class="btn btn-primary btn-lg shadow-sm">
                            <i class="fa-solid fa-heart"></i>
                        </button>
                    </div>
                    <div class="col-4 d-grid">
                        <button id="btnNo" class="btn btn-danger btn-lg shadow-sm">
                            <i class="fa-solid fa-thumbs-down"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Rating Constants
        const RATING = {
            LIKE: 0,
            SUPER_LIKE: 1,
            DISLIKE: 2
        };

        let tracks = [];
        let currentTrackIndex = 0;
        let currentProgressIndex = 0;
        let total = 0;

        // UI rendering
        function renderTrack(index) {
            if (!tracks || index >= tracks.length) {
                $("#cover").attr("src", "");
                $("#trackInfo").text("No more tracks!");
                $("#spotifyLink").attr("href", "#");
                return;
            }

            const track = tracks[index];
            $("#cover").attr("src", track.spotifyAlbumCoverUrl);
            $("#trackInfo").text(`${track.title} – ${track.artist}`);
            $("#spotifyLink").attr("href", track.spotifyUri);
        }

        function updateProgressBar() {
            const percentage = Math.min((currentProgressIndex / total) * 100, 100);

            $("#trackProgress")
                .css("width", `${percentage}%`)
                .attr("aria-valuenow", currentProgressIndex);

            $("#totalCount").text(total);
            $("#ratedCount").text(currentProgressIndex);
        }

        // Data load
        async function loadData() {
            try {
                const response = await fetch("/home/data");
                const data = await response.json();

                tracks = data.records;
                total = data.total;
                currentProgressIndex = data.rated;

                $("#loadingOverlay").hide();
                $("#app").show();

                renderTrack(currentTrackIndex);
                updateProgressBar();
            } catch (err) {
                $("#loadingOverlay").html("<p class='text-danger'>Failed to load data.</p>");
                console.error(err);
            }
        }

        // Track rating and advancement
        function handleRating(ratingValue, successMessage) {
            const track = tracks[currentTrackIndex];
            if (!track) return;

            rateTrack(track.spotifyTrackId, ratingValue)
                .then(() => {
                    toastr.success(`${successMessage} "${track.title}"`);
                    currentTrackIndex++;
                    currentProgressIndex++;
                    renderTrack(currentTrackIndex);
                    updateProgressBar();
                })
                .catch(() => toastr.error("Failed to rate the track."));
        }

        function rateTrack(spotifyTrackId, rating) {
            const url = `/api/records/rate-record?spotifyTrackId=${encodeURIComponent(spotifyTrackId)}&rating=${rating}`;
            return fetch(url, { method: "POST" });
        }

        // Event bindings
        $(document).ready(function () {
            $("#btnYes").click(() => handleRating(RATING.LIKE, "You liked"));
            $("#btnSuper").click(() => handleRating(RATING.SUPER_LIKE, "You super liked"));
            $("#btnNo").click(() => handleRating(RATING.DISLIKE, "You disliked"));

            renderTrack(currentTrackIndex);
            loadData();
        });
    </script>
}
