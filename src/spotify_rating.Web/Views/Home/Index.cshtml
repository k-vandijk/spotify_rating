@{
    ViewData["Title"] = "spotify_rating";
}

<button id="clearCache" class="btn btn-danger mb-3" onclick="clearCache();">Clear Cache</button>
<div class="mode-toggle">
    <button id="themeToggle">
        <i id="themeIcon" class="fa-solid"></i> TOGGLE THEME
    </button>
</div>
<div class="container d-flex flex-column align-items-center col-lg-6 col-md-9 col-xs-12">
    <img id="cover" class="img-fluid mb-4" src="" alt="Album cover" />
    <div id="trackInfo" class="track-info"></div>
    <div class="row mt-4 w-100">
        <div class="col-4 d-grid">
            <button id="btnYes" class="btn btn-success"><i class="fa-solid fa-thumbs-up"></i></button>
        </div>
        <div class="col-4 d-grid">
            <button id="btnSuper" class="btn btn-primary"><i class="fa-solid fa-heart"></i></button>
        </div>
        <div class="col-4 d-grid">
            <button id="btnNo" class="btn btn-danger"><i class="fa-solid fa-thumbs-down"></i></button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const tracksCacheKey = "likedTracks";
        const themeCacheKey = "theme";
        let currentIndex = 0;
        let tracks = [];

        async function loadTracks() {
            const cached = localStorage.getItem(tracksCacheKey);
            if (cached) {
                console.log("Using cached tracks...");
                tracks = shuffle(JSON.parse(cached));
                renderTrack(currentIndex);
                return;
            }

            console.log("Fetching tracks from server...");
            const response = await fetch("/api/spotify/liked-tracks");
            tracks = shuffle(await response.json());
            localStorage.setItem(tracksCacheKey, JSON.stringify(tracks));
            renderTrack(currentIndex);
        }

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function renderTrack(index) {
            if (!tracks || index >= tracks.length) {
                $("#cover").attr("src", "");
                $("#trackInfo").text("No more tracks!");
                return;
            }

            const track = tracks[index];
            $("#cover").attr("src", track.albumCoverUrl);
            $("#trackInfo").text(`${track.trackName} – ${track.artist}`);
        }

        function updateThemeIcon(theme) {
            const icon = $("#themeIcon");
            if (theme === "dark") {
                icon.removeClass().addClass("fa-solid fa-moon");
            } else {
                icon.removeClass().addClass("fa-solid fa-sun");
            }
        }

        function clearCache() {
            localStorage.removeItem(tracksCacheKey);
        }

        $(document).ready(function () {
            const savedTheme = localStorage.getItem(themeCacheKey) || "dark";
            $("body").addClass(savedTheme);
            updateThemeIcon(savedTheme);

            $("#btnYes, #btnSuper, #btnNo").click(function () {
                console.log(`${this.id.toUpperCase()}: ${tracks[currentIndex].trackName}`);
                currentIndex++;
                renderTrack(currentIndex);
            });

            $("#themeToggle").click(function () {
                $("body").toggleClass("dark light");
                const mode = $("body").hasClass("dark") ? "dark" : "light";
                localStorage.setItem(themeCacheKey, mode);
                updateThemeIcon(mode);
            });

            loadTracks();
        });
    </script>
}
