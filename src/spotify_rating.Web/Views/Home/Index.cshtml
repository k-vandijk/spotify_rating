@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery antiforgery
@{
    ViewData["Title"] = "spotify_rating";
    var tokens = antiforgery.GetAndStoreTokens(Context);
}

<meta name="csrf-token" content="@tokens.RequestToken" />
<input id="spotifyTrackId" hidden />

<div id="pageWrapper" class="position-relative" style="min-height: 100vh;">
    <partial name="Components/_Loading" />

    <div id="app" style="display: none;">
        <div class="card shadow-lg container p-0 my-5 col-xl-6 col-lg-8 col-md-10 col-sm-12 col-12 overflow-hidden">
            <partial name="Components/_LoadingMini" />
            <div class="position-relative">
                <div class="progress" style="height: 6px; border-radius: 0;">
                    <div id="trackProgress" class="progress-bar bg-success" role="progressbar"></div>
                </div>
                <div class="position-absolute top-100 end-0 mt-1 me-3 small" style="z-index: 1;">
                    <span id="ratedCount">0</span> / <span id="totalCount">0</span>
                </div>
            </div>



            <div class="p-5">
                <div class="text-center position-relative mb-4">
                    <img id="cover" class="img-fluid rounded shadow-sm mb-4" style="max-height: 300px;" src="" alt="Album cover"/>
                    <div class="d-flex justify-content-center align-items-center gap-2 mb-3">
                        <h5 id="trackInfo" class="fw-semibold mb-0"></h5>
                        <a id="spotifyLink" href="#" target="_blank" rel="noopener"
                           class="btn btn-spotify btn-sm rounded-circle shadow-sm d-flex align-items-center justify-content-center"
                           style="width: 32px; height: 32px;"
                           title="Open in Spotify">
                            <img src="https://upload.wikimedia.org/wikipedia/commons/8/84/Spotify_icon.svg" alt="Spotify" style="width: 18px; height: 18px;">
                        </a>
                    </div>
                </div>

                <div class="row gx-3">
                    <div class="col-4 d-grid">
                        <button id="btnYes" class="btn btn-success btn-lg shadow-sm">
                            <i class="fa-solid fa-thumbs-up"></i>
                        </button>
                    </div>
                    <div class="col-4 d-grid">
                        <button id="btnSuper" class="btn btn-primary btn-lg shadow-sm">
                            <i class="fa-solid fa-heart"></i>
                        </button>
                    </div>
                    <div class="col-4 d-grid">
                        <button id="btnNo" class="btn btn-danger btn-lg shadow-sm">
                            <i class="fa-solid fa-thumbs-down"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Rating Constants
        const RATING = {
            LIKE: 0,
            SUPER_LIKE: 1,
            DISLIKE: 2
        };

        let tracks = [];
        let currentTrackIndex = 0;
        let currentProgressIndex = 0;
        let total = 0;

        // UI rendering
        function renderTrack(index) {
            if (!tracks || index >= tracks.length) {
                $("#cover").attr("src", "");
                $("#trackInfo").text("No more tracks!");
                $("#spotifyLink").attr("href", "#");
                $("#spotifyTrackid").val("");
                return;
            }

            const track = tracks[index];
            $("#cover").attr("src", track.spotifyAlbumCoverUrl);
            $("#trackInfo").text(`${track.title} – ${track.artist}`);
            $("#spotifyLink").attr("href", track.spotifyUri);
            $("#spotifyTrackId").val(track.spotifyTrackId);
        }

        function updateProgressBar() {
            const percentage = Math.min((currentProgressIndex / total) * 100, 100);

            $("#trackProgress")
                .css("width", `${percentage}%`)
                .attr("aria-valuenow", currentProgressIndex);

            $("#totalCount").text(total);
            $("#ratedCount").text(currentProgressIndex);
        }

        // Data load
        async function loadData() {
            const cached = loadFromCache();
            if (cached) {
                tracks = cached.tracks;
                total = cached.total;
                currentProgressIndex = cached.rated;

                renderTrack(currentTrackIndex);
                updateProgressBar();
                $("#app").show();
            }

            try {
                const response = await fetch("/api/home/data");
                const data = await response.json();

                // Alleen overschrijven als de data verschilt of niets gecachet is
                if (!cached || JSON.stringify(data.tracks) !== JSON.stringify(cached.tracks)) {
                    tracks = data.tracks;
                    total = data.total;
                    currentProgressIndex = data.rated;
                    currentTrackIndex = 0; // opnieuw vanaf het begin van de geladen lijst beginnen

                    if (!$("#app").is(":visible")) {
                        renderTrack(currentTrackIndex);
                    }

                    updateProgressBar();
                    $("#app").show();
                 
                    saveToCache(data);
                }

                $("#loadingOverlay").remove();
                $("#miniLoadingOverlay").remove();
            } catch (err) {
                $("#loadingOverlay").html("<p class='text-danger'>Failed to load data.</p>");
                console.error(err);
            }
        }

        function saveToCache(data) {
            localStorage.setItem("cachedTrackData", JSON.stringify(data));
        }

        function loadFromCache() {
            const cached = localStorage.getItem("cachedTrackData");
            return cached ? JSON.parse(cached) : null;
        }

        // Track rating and advancement
        function handleRating(ratingValue, successMessage) {
            const spotifyTrackId = $("#spotifyTrackId").val();
            const trackInfo = $("#trackInfo").text();

            rateTrack(spotifyTrackId, ratingValue)
                .then(() => {
                    toastr.success(`${successMessage} "${trackInfo}"`);
                    tracks.splice(currentTrackIndex, 1);
                    saveToCache({ tracks, total, rated: currentProgressIndex });
                    currentTrackIndex++;
                    currentProgressIndex++;
                    renderTrack(currentTrackIndex);
                    updateProgressBar();
                })
                .catch(() => toastr.error("Failed to rate the track."));
        }

        function rateTrack(spotifyTrackId, rating) {
            const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            const url = `/api/home/rate-track?spotifyTrackId=${encodeURIComponent(spotifyTrackId)}&rating=${rating}`;

            return fetch('/api/home/rate-track', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": token
                },
                body: JSON.stringify({ spotifyTrackId, rating })
            });
        }

        // Event bindings and initialization
        $(document).ready(function () {
            $("#btnYes").click(() => handleRating(RATING.LIKE, "You liked"));
            $("#btnSuper").click(() => handleRating(RATING.SUPER_LIKE, "You super liked"));
            $("#btnNo").click(() => handleRating(RATING.DISLIKE, "You disliked"));

            renderTrack(currentTrackIndex);
            loadData();
        });
    </script>
}
