@model RecommendationsViewModel
@{
    ViewData["Title"] = "spotify_rating";
}

<partial name="Components/_LoadingMini" />
<h3 class="mb-3 text-center">Music Suggestions</h3>
<h5 class="mb-3">Suggested Songs</h5>
<div class="list-group songs-list">
    @foreach (var track in Model.Tracks)
    {
        ListItemViewModel viewModel = new ListItemViewModel
        {
            PictureUrl = track.SpotifyAlbumCoverUrl,
            Title = track.Title,
            Subtitle = track.Artist,
            Badge = track.AiGenre,
            SpotifyButtonUrl = track.SpotifyUri,
            LikeButtonUrl = $"/api/recommendations/like?track={track.SpotifyTrackId}",
            DislikeButtonUrl = $"/api/recommendations/dislike?track={track.SpotifyTrackId}"
        };

        <partial name="Components/_ListItem" model="viewModel"/>
    }
</div>

<h5 class="mb-3 mt-5">Suggested Playlists</h5>
<div class="row playlists-list">
    @foreach (var playlist in Model.Playlists)
    {
        ListItemMiniViewModel viewModel = new ListItemMiniViewModel
        {
            CardUrl = $"/recommendations/playlist/{playlist.Id}",
            Title = playlist.Name,
            Subtitle = playlist.Description,
            Badge = playlist.Genre,
            BadgeClass = "bg-info"
        };

        <partial name="Components/_ListItemMini" model="viewModel" />
    }
</div>
                                        
@section Scripts {
    <script>
        const songCount = 5;
        const playlistCount = 4;
        let fetchedSongs = @Model.Tracks.Count;
        let fetchedPlaylists = @Model.Playlists.Count;

        $(document).ready(function () {
             $("#miniLoadingOverlay").hide();
            fetchInitialRecommendations();

            if (fetchedSongs + fetchedPlaylists > 0 ) {
                $("#app").show();
            }
        });

        async function fetchInitialRecommendations() {
            while (fetchedSongs < songCount) {
                await fetchSong();
            }

            while (fetchedPlaylists < playlistCount) {
                await fetchPlaylist();
            }
        }

        async function fetchSong() {
            try {
                showSmallLoader();

                const response = await fetch("/api/recommendations/song");
                const song = await response.json();

                addSongToList(song);
                fetchedSongs++;
            } catch (error) {
                console.error("Failed to fetch song:", error);
            } finally {
                $("#app").show();
                hideSmallLoader();
            }
        }

        async function fetchPlaylist() {
            try {
                showSmallLoader();

                const response = await fetch("/api/recommendations/playlist");
                const playlist = await response.json();

                addPlaylistToList(playlist);
                fetchedPlaylists++;
            } catch (error) {
                console.error("Failed to fetch playlist:", error);
            } finally {
                $("#app").show();
                hideSmallLoader();
            }
        }

        async function addSongToList(song) {
            try {
                const response = await fetch("/api/recommendations/render-track", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(song)
                });

                const html = await response.text();
                $(".songs-list").append(html);
            } catch (error) {
                console.error("Failed to render song partial:", error);
            }
        }

        async function addPlaylistToList(playlist) {
            try {
                const response = await fetch("/api/recommendations/render-playlist", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(playlist)
                });

                const html = await response.text();
                $(".playlists-list").append(html);
            } catch (error) {
                console.error("Failed to render playlist partial:", error);
            }
        }

        function showSmallLoader() {
            $("#miniLoadingOverlay").show();
        }

        function hideSmallLoader() {
            $("#miniLoadingOverlay").hide();
        }
    </script>
}
