@model RecommendationsViewModel
@{
    ViewData["Title"] = "spotify_rating";
}

<!-- 

De api heeft funcies die elk 1 playlist of 1 song geven, deze worden 1x tegelijk aangeroepen totdat de gebruiker 5 songs heeft, en 3 playlist.
Wanneer de gebruiker een verwijderd, wordt desbetreffende functie opnieuw aangeroepen.

Je zal de main loading spinner dus alleen zien totdat het eerste item is gegeven

Daarna zal je altijd een kleine spinner rechtsbovenin zien als de app aan het wachten is op een openai call.

Deze songsuggesties en playlist suggesties zullen worden gecached.

Bij playlists zal de knop staan om ze op te slaan op hun spotify account.

-->

<div id="pageWrapper" class="position-relative" style="min-height: 100vh;">
    <partial name="_Loading" />

    <div id="app" style="display: none;">

        <div class="card shadow-lg container p-0 my-5 col-xl-6 col-lg-8 col-md-10 col-sm-12 col-12">
            <div class="p-5">
                <h3 class="mb-4 text-center">Music Suggestions</h3>

                <div class="mb-5">
                    <h5 class="mb-3">Suggested Songs</h5>
                    <div class="list-group songs-list">
                        @foreach (var track in Model.Tracks)
                        {
                            <a href="@track.SpotifyUri" class="list-group-item list-group-item-action d-flex gap-3 py-3 align-items-center text-decoration-none" target="_blank">
                                <img src="@track.SpotifyAlbumCoverUrl" class="rounded shadow-sm flex-shrink-0" style="width: 64px; height: 64px; object-fit: cover;" alt="Cover" />
                                <div class="flex-grow-1">
                                    <div class="fw-semibold">@track.Title</div>
                                    <div class="small">@track.Artist</div>
                                </div>
                                @if (!string.IsNullOrEmpty(track.AiGenre))
                                {
                                    <span class="badge bg-info">@track.AiGenre</span>
                                }
                            </a>
                        }
                    </div>
                </div>

                <div>
                    <h5 class="mb-3">Suggested Playlists</h5>
                    <div class="row g-3 playlists-list">
                        @foreach (var playlist in Model.Playlists)
                        {
                            <div class="col-md-6">
                                <a href="/recommendations/playlist/@playlist.Id" class="text-decoration-none text-dark">
                                    <div class="card h-100 shadow-sm hover-shadow-sm">
                                        <div class="card-body">
                                            <h6 class="card-title mb-1">@playlist.Name</h6>
                                            <p class="card-text small mb-2">@playlist.Description</p>
                                            <span class="badge bg-info">@playlist.Genre</span>
                                        </div>
                                    </div>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
                                        
@section Scripts {
    <script>
        const songCount = 5;
        const playlistCount = 2;
        let fetchedSongs = $(".songs-list a").length;
        let fetchedPlaylists = $(".playlists-list a").length;

        $(document).ready(function () {
            fetchInitialRecommendations();
        });

        async function fetchInitialRecommendations() {
            while (fetchedSongs < songCount) {
                await fetchSong();
            }

            while (fetchedPlaylists < playlistCount) {
                await fetchPlaylist();
            }

            $("#app").show();
        }

        async function fetchSong() {
            try {
                showSmallLoader();

                const response = await fetch("/api/recommendations/song");
                const song = await response.json();

                addSongToList(song);
                fetchedSongs++;
            } catch (error) {
                console.error("Failed to fetch song:", error);
            } finally {
                $("#app").show();
                hideSmallLoader();
            }
        }

        async function fetchPlaylist() {
            try {
                showSmallLoader();

                const response = await fetch("/api/recommendations/playlist");
                const playlist = await response.json();

                addPlaylistToList(playlist);
                fetchedPlaylists++;
            } catch (error) {
                console.error("Failed to fetch playlist:", error);
            } finally {
                $("#app").show();
                hideSmallLoader();
            }
        }

        function addSongToList(song) {
            $(".songs-list").append(`
                <a href="${song.spotifyUri}" class="list-group-item list-group-item-action d-flex gap-3 py-3 align-items-center text-decoration-none" target="_blank">
                    <img src="${song.spotifyAlbumCoverUrl}" class="rounded shadow-sm flex-shrink-0" style="width: 64px; height: 64px; object-fit: cover;" alt="Cover" />
                    <div class="flex-grow-1">
                        <div class="fw-semibold">${song.title}</div>
                        <div class="text-muted small">${song.artist}</div>
                    </div>
                    <span class="badge bg-info">${song.aiGenre}</span>
                </a>
            `);
        }

        function addPlaylistToList(playlist) {
            $(".playlists-list").append(`
                <a href="/recommendations/playlist/${playlist.id}" class="text-decoration-none text-dark">
                    <div class="card h-100 shadow-sm hover-shadow-sm">
                        <div class="card-body">
                            <h6 class="card-title mb-1">${playlist.name}</h6>
                            <p class="card-text small mb-2">${playlist.description}</p>
                            <span class="badge bg-secondary">${playlist.genre}</span>
                        </div>
                    </div>
                </a>
            `);
        }

        function showSmallLoader() {
            // show spinner (e.g. top-right)
        }

        function hideSmallLoader() {
            // hide spinner
        }
    </script>
}
